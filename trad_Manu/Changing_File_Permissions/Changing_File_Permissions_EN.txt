{{Languages|
{{en|Changing File Permissions}}
{{fr|Changer les permissions des fichiers}}
{{pt-br|Mudando Permissões de Arquivos}}
{{ja|ファイルパーミッションの変更}}
{{zh-cn|更改文件权限}}
}}

__TOC__
Sur des systèmes informatiques, les fichiers et dossiers ont des <strong>permissions</strong> qui spécifient les droits de lecture, d'écriture, de modification et d'accès à un fichier donné. Ces réglages sont importants, car WordPress aura besoin d'accéder et d'écrire des fichiers dans votre dossier <code>wp-content</code> afin de permettre le bon fonctionnement de site.

== Les modes de permission ==

<pre style="font-size:1.1em;font-weight:bold;border:1px solid #80C9FF;background-color:#BFE4FF;width:45%;color:#000;padding:.5em;">
  7       5     5
 user   group  world
 r+w+x  r+x    r+x
 4+2+1  4+0+1  4+0+1  = 755
</pre>

Le mode de permission est calculé en additionnant les valeurs suivantes pour l'utilsateur, le groupe, et pour toute autre entité (world).  Ce diagramme illustre le fonctionnement.
* '''R'''ead    4  - Droit de lecture
* '''W'''rite   2  - Droit d'écrire et de modification
*  e'''X'''ecute1  - Read/write/delete/modify/directory

<pre style="font-size:1.1em;font-weight:bold;border:1px solid #80FF80;background-color:#BFFFBF;width:45%;color:#000;padding:.5em;">
  7       4      4
 user   group  world
 r+w+x    r      r
 4+2+1  4+0+0  4+0+0  = 744
</pre>

=== Quelques exemples ===
{|
|-  style="width:99%; margin:0 auto;" border="0" cellpadding="3" cellspacing="1" align="center" bgcolor="#eee" color="000" border="1"
! '''Mode''' !! '''Str Perms''' !! '''Explicatif'''
|-
| '''0477''' ||-r--rwxrwx|| le propriétaire a les droits de lecture (4), other at group ont rwx (7)
|-
| '''0677''' || -rw-rwxrwx||owner has rw only(6), other and group has rwx (7)
|-
| '''0444''' || -r--r--r--||droits de lecture uniquement pour tous (4)
|-
| '''0666''' || -rw-rw-rw-||droits rw uniquement (6)
|-
| '''0400''' || -r--------||owner has read only(4), group and others have no permission(0)
|-
| '''0600''' || -rw-------||owner has rw only, group and others have no permission
|-
| '''0470''' || -r--rwx---||owner has read only, group has rwx, others have no permission
|-
| '''0407''' || -r-----rwx||owner has read only, other has rwx, group has no permission
|-
| '''0670''' || -rw-rwx---||owner has rw only, group has rwx, others have no permission
|-
| '''0607''' || -rw----rwx||owner has rw only, group has no permission and others have rwx
|+Voir la liste complète sur [http://www.askapache.com/security/chmod-stat.html#chmod-0-to-7777 0000 to 0777].
|}

== Schéma de permissions pour WordPress ==

Les permissions pourront différer d'un hébergeur à l'autre, ce guide se contentera donc d'expliquer le principe général. Il ne couvrira pas tous les cas possibles. Ce guide s'applique à des serveurs avec des réglages standard (pour des hébergements partagés utilisant la méthode "suexec", voir [[cet article (en)]]).

Généralement, tous les fichiers devraient avoir pour "propriétaire" (owner) l'utilisateur correspondant à votre compte FTP, qui aura les droits d'écriture. Sur des hébergements partagés, les fichiers ne devraient jamais appartenir au processus du serveur (parfois nommé '''www''', ou '''apache''', ou '''nobody''').

Tout fichier qui nécessite des droits d'écriture devrait appartenir au compte utilisé par WordPress (qui peut être différent du compte serveur). Si WordPress correspond au compte FTP, ce compte devra avoir des droits d'écriture, ou faire partie d'un groupe ayant des droits d'écriture. Dans le dernier cas, les permissions seront plus "ouvertes" (par exemple 775 au lieu de 755 pour des dossiers, et 664 au lieu de 644 pour des fichiers).

Les permissions des fichiers et dossier devraient être les mêmes pour la plupart des utilisateurs, et dépenderont de la manière dont l'installation a été effectuée, ainsi que des réglages "umask" de votre système au moment de l'installation. 

{{Note| If you installed WordPress yourself, you likely do not need to modify file permissions.  Unless you are experiencing problems with permission errors, or you ''want to'', you probably should not mess with this.}}

{{Note 2| Si vous avez installé WordPress vous-même, vous DEVRIEZ probalement changer certaines permissions.  Certains fichiers et dossiers devraient être "blindés" avec des permissions plus strictes, en particuler le fichier wp-config.php. Ce fichier est créé initialement avec des permissions 644 (-rw-r--r-), et le laisser ainsi constitue un risque. Voir Security and Hardening. }}

Typically, all core WordPress files should be writable only by your user account (or the httpd account, if different). (Sometimes though, multiple ftp accounts are used to manage an install, and if all ftp users are known and trusted, i.e., not a shared host, then assigning group writable may be appropriate. Ask your server admin for more info.)  However, if you utilize mod_rewrite Permalinks or other .htaccess features you should make sure that WordPress can also write to your <code>/.htaccess</code> file.

If you want to use the built-in theme editor, all files need to be group writable.  Try using it before modifying file permissions, it should work. (This may be true if different users uploaded the WordPress package and the Plugin or Theme. This wouldn't be a problem for Plugin and Themes installed via the admin. When uploading files with different ftp users group writable is needed. On shared hosting, make sure the group is exclusive to users you trust... the apache user shouldn't be in the group and shouldn't own files.)

Some plugins require the /wp-content/ folder be made writeable, but in such cases they will let you know during installation. In some cases, this may require assigning 755 permissions.  The same is true for <code>/wp-content/cache/</code> and maybe <code>/wp-content/uploads/</code> (if you're using [[MultiSite]] you may also need to do this for <code>/wp-content/blogs.dir/</code>)

Additional directories under /wp-content/ should be documented by whatever plugin / theme requires them. Permissions will vary. 

<pre>
/   
|- index.php
|- wp-admin
|   `- wp-admin.css
|- wp-blog-header.php
|- wp-comments-post.php
|- wp-commentsrss2.php
|- wp-config.php
|- wp-content
|   |- cache
|   |- plugins
|   |- themes
|   `- uploads
|- wp-cron.php
|- wp-includes
`- xmlrpc.php
</pre>

=== Hébergement partagé avec suexec ===

Cette partie n'a pas été pas traduite. Référez-vous à la [[documentation en Anglais]].

== Utilisation d'un client FTP ==

Un [[FTP_Clients|client FTP (en)]] vous permettra de changer les permissions des fichiers et dosssiers sur un serveur. Cette fonction se nomme souvent <code>chmod</code> ou <code>réglage des permissions</code> dans le menu de l'application.

In a [[Installing_WordPress|WordPress install]], two files that you will probably want to alter are the index page, and the css which controls [[Blog_Design_and_Layout|the layout]]. Here's how you change index.php - ''the process is the same for any file''.

In the screenshot below, look at the last column - that shows the permissions. It looks a bit confusing, but for now just note the sequence of letters.
<br />
[[Image:podz_filezilla_12.gif|center|thumb|400px|Initial permissions]]

Right-click 'index.php' and select 'File Permissions'<br />
A popup screen will appear.
[[Image:podz_filezilla_13.gif|center|thumb|305px|Altering file permissions]]

Ne vous préoccupez pas des cases à cocher. Remplaces simplement la 'Valeur numérique:' et entez le nombre souhaité - dans ce cas 666. Puis cliquez sur OK.
<br />
[[Image:podz_filezilla_14.gif|center|thumb|400px|Permissions have been altered]]
Vous pouvez voir que les permissions du fichier ont effectivement changé.

=== Faire apparaître les fichiers invisibles ===

Par défaut, la plupart des [[FTP_Clients|clients FTP]], y compris [http://filezilla.sourceforge.net/ FileZilla], n'affichent pas les fichiers dont le nom commence par un point(.).  Toutefois, vous aurez peut-être besoin d'afficher ces fichiers afin de pouvoir changer leurs permissions.  Par exemple, vous aurez peut-être besoin de donner des droits d'écriture sur le fichier [[Glossary#.htaccess|.htaccess (en)]], qui gère les [[Using Permalinks|permaliens]].  

Pour faire apparaître les fichiers cachés dans FileZilla, il est nécessaire de choisir 'View' dans le menu principal, puis sélectionner 'Show hidden files'. La liste des fichiers se raffraichira, et les fichiers masqués seront désormais visibles.

Pour forcer FileZilla à toujours montrer ces fichiers, rendez-vous sous Edit > Settings > Remote File List, et chochez la boîte "Always show hidden files".

Dans la dernière version de Filezilla, l'option 'Show hidden files' à été placée dans l'onglet 'Serveur'. Sélectionnez 'Force show hidden files.'

== Utilisation de la ligne de commande ==

Cette partie n'a pas été pas traduite. Référez-vous à la [[documentation en Anglais]].

=== La commande chmod ===

Cette partie n'a pas été pas traduite. Référez-vous à la [[documentation en Anglais]].

== Les dangers du 777 ==

Les réglages de permissions seront toujours dépendants de la configuration de votre serveur. L'utilisateur de votre compte FTP ou SSH utilisé pour communiquer avec votre serveur n'est probablement pas identique à l'utilisateur employé par le serveur pour afficher les pages de votre site.

<pre style="font-size:1.2em;font-weight:bold;border:1px solid #FF9980;background-color:#FFCCBF;width:45%;color:#000;padding:.5em;">
  7      7      7
 user   group  world
 r+w+x  r+w+x  r+w+x
 4+2+1  4+2+1  4+2+1  = 777
</pre>

Souvent, un serveur Apache opère avec le comptes utilisateurs '''dhapache''' ou '''nobody'''. Ces comptes ont des droits d'accès limités, et ceci pour de bonnes raisons. Si vos fichiers et dossiers personnels sont ouverts à l'écriture par "world", ils seront modifiables par le monde entier, littéralement. À présent les utilisateurs "dhapache" et "nobody" qui effectuent les tâches server, affichent vos pages, exéctuent des interprétateurs php etc… auront un accès complet aux fichiers de votre compte.  

Ceci ouvre un accès facilité à vos fichiers pour quiconque usurperait le processus serveur, par exemple un autre utilisateur sur cette même machine. Vous devriez donc considérer avec prudence toute modification des permissions. Les permissions ne devraient jamais excéder 767. Si le 777 est nécessaire, demandez des explications à votre hébergeur.

=== Le The Worst Outcome ===

The worst that can happen as a result of using 777 permissions on a folder or even a file, is that if a malicious cracker or entity is able to upload a devious file or modify a current file to execute code, they will have complete control over your blog, including having your database information and password.

=== Find a Workaround ===

Its usually pretty easy to have the enhanced features provided by the impressive WordPress plugins available, without having to put yourself at risk.  Contact the Plugin author or your server support and request a workaround.

== Finding Secure File Permissions ==

The .htaccess file is one of the files that is accessed by the owner of the process running the server.  So if you set the permissions too low, then your server won't be able to access the file and will cause an error.  Therein lies the method to find the most secure settings.  Start too restrictive and increase the permissions until it works. 

=== Example Permission Settings ===

The following example has a ''custom compiled php-cgi binary'' and a ''custom php.ini'' file located in the cgi-bin directory for executing php scripts.  To prevent the interpreter and php.ini file from being accessed directly in a web browser they are protected with a .htaccess file.

Default Permissions (umask 022)

 644 -rw-r--r--  /home/user/wp-config.php
 644 -rw-r--r--  /home/user/cgi-bin/.htaccess
 644 -rw-r--r--  /home/user/cgi-bin/php.ini
 755 -rwxr-xr-x  /home/user/cgi-bin/php.cgi
 755 -rwxr-xr-x  /home/user/cgi-bin/php5.cgi

Secured Permissions

 600 -rw-------  /home/user/wp-config.php
 6'''0'''4 -rw----r--  /home/user/cgi-bin/.htaccess
 6'''00''' -rw-------  /home/user/cgi-bin/php.ini
 7'''11''' -rwx--x--x  /home/user/cgi-bin/php.cgi
 '''100''' ---x------  /home/user/cgi-bin/php5.cgi

==== Les permissions du .htaccess ====

'''644 > 604''' - The bit allowing the group owner of the .htaccess file read permission was removed.   644 is normally required and recommended for .htaccess files.

==== Les permissions du php.ini ====

'''644 > 600''' - Previously all groups and all users with access to the server could access the php.ini, even by just requesting it from the site.  The tricky thing is that because the php.ini file is only used by the php.cgi, we only needed to make sure the php.cgi process had access.   The php.cgi runs as the same user that owns both files, so that single user is now the only user able to access this file.

==== Les permissions du  php.cgi ====

'''755 > 711'''
This file is a compiled php-cgi binary used instead of mod_php or the default vanilla php provided by the hosting company.  The default permissions for this file are 755.

==== Les permissions du php5.cgi ====

'''755 > 100''' - Because of the setup where the user account is the owner of the process running the php cgi, no other user or group needs access, so we disable all access except execution access.  This is interesting because it really works.  You can try reading the file, writing to the file, etc.. but the only access you have to this file is to run php scripts.  And as the owner of the file you can always change the permission modes back again.
 
 $ cat: php5.cgi: Permission denied
 ./php5.cgi:  Welcome

== Voir ausi ==

* [http://wordpress.org/support/topic/50863 Support Forum thread (en)]
* [[htaccess for subdirectories|htaccess pour les sous-répertoires (en)]]
* [http://codex.wordpress.org/Editing_wp-config.php#Override_of_default_file_permissions|Surcharger les permissions par défaut de WordPress (en)]


[[Category:Installation]]
[[Category:Getting Started]]
[[Category:Advanced Topics]]
[[Category:Troubleshooting]]
[[Category:UI Link]]
